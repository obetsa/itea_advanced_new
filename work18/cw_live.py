# Докеры
# https://docs.docker.com/engine/install/ - установка docker
# https://docs.docker.com/compose/install/ - установка docker-compose

# Так вот Docker - коробка, которую достаточно единожды настроить под проект, чтобы в дальнейшем
# не было проблем с эксплуатацией/расширением сервиса

# DockerHub - место, где разработчики размещают свои созданные образы контейнеров.
# https://habr.com/ru/company/ruvds/blog/438796/ - блестящая статья!

# FROM — задаёт базовый (родительский) образ.
# LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
# ENV — устанавливает постоянные переменные среды.
# RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
# COPY — копирует в контейнер файлы и папки.
# ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
# CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен.
# Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
# WORKDIR — задаёт рабочую директорию для следующей инструкции.
# ARG — задаёт переменные для передачи Docker во время сборки образа.
# ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера.
# Аргументы не переопределяются.
# EXPOSE — указывает на необходимость открыть порт.
# VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.

# Команды для управления контейнерами:
# create — создание контейнера из образа.
# start — запуск существующего контейнера.
# run — создание контейнера и его запуск.
# ls — вывод списка работающих контейнеров.
# inspect — вывод подробной информации о контейнере.
# logs — вывод логов.
# stop — остановка работающего контейнера с отправкой главному процессу контейнера
# сигнала SIGTERM, и, через некоторое время, SIGKILL.
# kill — остановка работающего контейнера с отправкой главному процессу контейнера сигнала SIGKILL.
# rm — удаление остановленного контейнера.

# Команды для управления образами
# build — сборка образа.
# push — отправка образа в удалённый репозиторий.
# ls — вывод списка образов.
# history — вывод сведений о слоях образа.
# inspect — вывод подробной информации об образе, в том числе — сведений о слоях.
# rm — удаление образа.

# перед началом работы в терминале пишем команду:
# docker login, вводим данные авторизации

# Прочие команды
# docker version — вывод сведений о версиях клиента и сервера Docker.
# docker login — вход в реестр Docker.
# docker system prune — удаление неиспользуемых контейнеров, сетей и образов, которым не назначено имя и тег.

# Собираем контейнер по докерфайлу
# docker build . - создаст образ без имени
# docker build --tag python-docker . - создаст образ с именем
# docker tag python-docker:latest python-docker:v1.0.0 - позволяет тегнуть собранный образ
# docker build -t luchanos/python-docker:v1.0.0 . - собрать образ сразу с тегом (НЕ ЗАБЫВАЕМ ПРО ТОЧКУ!)

# НАЧАЛО ЖИЗНИ КОНТЕЙНЕРА
# создать контейнер из образа. Сначала образ будет искаться локально, если он не будет найдет, то поиск будет
# происходить в docker hub
# create luchanos/flask_app:1.0.0

# docker container start my_container - запускаем собранный контейнер
# docker run -d -p 5000:5000 python-docker - запуск в deattached mode
# docker run -p 5000:5000 -d 18e94025bc97

# Коммит контейнера:
# docker commit luchanos/python-docker:v1.0.0
# Пуш контейнера
# docker push luchanos/python-docker:v1.0.0

# запуск контейнера в интерактивном режиме:
# docker run -it a24bb4013296 bin/sh


# Docker Compose — это инструментальное средство, входящее в состав Docker.
# Оно предназначено для решения задач, связанных с развёртыванием проектов.
# https://habr.com/ru/company/ruvds/blog/450312/ - блестящая статья

# Docker применяется для управления отдельными контейнерами (сервисами), из которых состоит приложение.
# Docker Compose используется для одновременного управления несколькими контейнерами, входящими в состав приложения.

# Ваш проект становится всё популярнее, и оказывается, что мощности сервера, на котором он работает, уже недостаточно.
# В результате вы решаете перевести весь проект на другую машину.
#
# К сожалению, нечто вроде Docker Compose вы не использовали. Поэтому вам придётся переносить и перенастраивать
# сервисы по одному, надеясь на то, что вы, в процессе этой работы, ничего не забудете.

# docker-compose build - построить сервис
# docker-compose up - поднять сервис

# crontab -e - настройка планировщика
# * * * * * python <путь к исполняемому файлу на Питоне>