# Протокол HTTP
# По сути HTTP протокол - это соглашение о структуре текстовых файлов, которые летают по сети
# Заголовки, методы и прочие вещи о которых пойдёт сегодня речь - часть этого текстового файла

# HTTP родился вместе с такими понятиями, как HTML, web-server и web-браузер.

# Гипертекст (HTML). Пример самого простого документа:

"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
Hello, World!
</body>
</html>"""

# URL - Uniform Resource Location. Уникальное положение ресурса.
# http://www.youtube.com/ - сначала идёт название протокола, потом после :// доменное имя + адрес
# страницы ресурса, к которому мы хотим получить доступ

# Клиент отправляет запрос на сервер, а тот отвечает ему. Давайте раскроем два этих понятия:
# Сервер - Обслуживающее устройство в системах автоматической обработки информации
# Клиент - компонент, посылающий запросы серверу
# Пример клиентских программ: Excel
# Пример серверных приложений: Excel online, Telegram

# Протокол HTTP предполагает использование клиент-серверной архитектуры

# Структура протокола:
# 1. Запрос / статус ответа:
# GET /courses/network
# 2. заголовки:
# Content-Type: text/html; charset=UTF-8
# 3. Тело сообщения (не обязательно):
# параметры, которые ввёл пользователь

# Группы статусов HTTP:
# 1XX - информационное
# 2XX - успешное выполнение
# 3XX - перенаправление
# 4XX - ошибка на стороне клиента
# 5XX - ошибка на стороне сервера

# Основные коды ответов HTTP запроса:
# 200 - OK - Всё прошло успешно
# 401 - Not Authorized - не авторизован
# 403 - Forbidden - не разрешено, доступ запрещён
# 404 - Not Found - Не найдено
# А теперь самая страшная для сервера ошибка:
# 500 - Internal Server Error - внутренняя ошибка сервера
# 503 - сервис недоступен

# Самые популярные методы HTTP запроса:
# GET - запрос данных (например web-страницы)
# POST - передача данных на web-сервер
# PUT - помещение данных на web-сервер
# DELETE - удаление данных с web-сервера
# PATCH - модификация данных на web-сервере
# OPTIONS - получение информации о поддерживаемых методах для web-сервера
# Внимание, это не самый полный список, их гораздо больше!

# ВНИМАНИЕ! Это лишь общепринятые понятия - то есть при желании на стороне сервера можно сделать так,
# чтобы он обрабатывал метод GET с телом так, чтобы на сервер добавлялись данные.

# Как всё работало long time ago:
# Отправили запрос - получили страницу в ответ. В целом, так работают и сейчас, если нет необходимости иметь на своём
# web-ресурсе всякие интеракцивные свистелки.
# Современный web более сложный: вместо статических страниц появились сложные динамические страницы с большим
# количеством элементов, которые часто требуют отслеживать состояние (например когда вы кладёте товары в корзину они
# должны сохраняться при переходе на другие страницы)

# API - Application Programming Interface. Интерфейс и графический интерфейс - не одно и то же.
# Мы как пользователи ходите по web-ресурсам, тыкаете кнопочки и при этом происходит взаимодействие между подкапотными
# приложениями.
# По сути API - методы, которыми пользуются программы для того, чтобы взаимодействовать между собой


# REST -  архитектурный стиль взаимодействия компонентов распределённого приложения в сети.

# REST - Representational State Transfer - передача состояния представления. Требования:
# 1. Модель клиент-сервер
# 2. Отсутствие состояния
# 3. Кэширование
# 4. Единообразие интерфейса
# 5. Слои
# 6. Код по требованию

# Выполнение этих ограничений обязательно для REST-систем. Накладываемые ограничения определяют работу сервера в том,
# как он может обрабатывать и отвечать на запросы клиентов. Действуя в рамках этих ограничений,
# система приобретает такие желательные свойства как производительность, масштабируемость, простота, способность
# к изменениям, переносимость, отслеживаемость и надёжность.
# Если сервис-приложение нарушает любое из этих ограничительных условий, данную систему нельзя считать REST-системой